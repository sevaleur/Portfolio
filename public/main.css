/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.projects, .home, .preloader, .content, body, html, .about, .project {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.about, .project {
  opacity: 0;
  visibility: hidden;
}

.navigation__title {
  font-family: "n27regular";
  font-size: 2rem;
}

.project__text__left__title, .projects__project__title {
  font-family: "n27regular";
  font-size: 12rem;
}

.home__slogan, .home__occupation, .navigation__list__item, body {
  font-family: "Fira Code";
  font-size: 1.6rem;
}

.navigation__list__item, .navigation__contact__text {
  position: relative;
  overflow: hidden;
  display: inline-block;
  vertical-align: top;
}

/*
  Bottom link line // from center.
*/
.navigation__list__item:after, .navigation__contact__text:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1px;
  background: currentColor;
  transition: transform 0.7s cubic-bezier(0.77, 0, 0.175, 1);
}

.navigation__list__item:hover:after, .navigation__contact__text:hover:after {
  transform: scaleX(1);
  transform-origin: center center;
}

.navigation__list__item:after, .navigation__contact__text:after {
  transform: scaleX(0);
  transform-origin: center center;
}

/*
  Complete link center.
*/
.navigation__list__item, .navigation__contact__text {
  display: inline-block;
}
@font-face {
  font-family: "Fira Code";
  src: url(dac39057830f1d001d86.woff2) format("woff2"), url(a25d3a54ca0de3944eb7.woff) format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "n27regular";
  src: url(d830597ebadd9aefaa0c.woff2) format("woff2"), url(a7c2d0c96c6b3e337776.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
* {
  box-sizing: border-box;
  user-select: none;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  overflow: hidden;
  position: fixed;
  background: #232323;
  color: #CED1D3;
}
@media (max-width: 1023px) {
  html {
    font-size: 0.9765625vw;
  }
}
@media (max-width: 767px) {
  html {
    font-size: 1.3020833333vw;
  }
}

body {
  position: fixed;
  font-family: "Fira Code";
}

canvas {
  position: relative;
  z-index: 1;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 0;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}
img.loaded {
  opacity: 1;
}

.preloader {
  background: #232323;
  z-index: 6;
}
.preloader__number {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.navigation {
  z-index: 5;
  position: fixed;
  width: 100%;
  height: 10rem;
}
.navigation__wrapper {
  overflow: hidden;
}
.navigation__title {
  position: absolute;
  top: 4rem;
  left: 4rem;
  text-transform: uppercase;
  letter-spacing: 0.5rem;
}
.navigation__contact {
  position: absolute;
  top: 4rem;
  left: 50%;
  transform: translateX(-50%);
}
.navigation__menu {
  position: absolute;
  top: 4rem;
  right: 4rem;
}
.navigation__list {
  display: flex;
  gap: 4rem;
}
.home {
  position: relative;
}
.home__occupation {
  mix-blend-mode: difference;
  text-transform: uppercase;
  letter-spacing: 0.5rem;
  position: absolute;
  bottom: 4rem;
  right: 4rem;
}
.home__slogan {
  mix-blend-mode: difference;
  text-transform: uppercase;
  letter-spacing: 0.5rem;
  position: absolute;
  bottom: 4rem;
  left: 4rem;
}

.projects {
  position: relative;
  z-index: 2;
}
.projects__wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.projects__project {
  display: flex;
  gap: 2rem;
  position: relative;
}
.projects__project__link {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}
.projects__project__media {
  height: 10rem;
  width: 12rem;
  visibility: hidden;
}
.projects__project__media__figure {
  height: 100%;
  width: 100%;
}
.projects__project__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.projects__project__title {
  text-transform: uppercase;
}
.project {
  z-index: 2;
}
.project__media {
  height: 65rem;
  width: 100%;
  margin-top: 10rem;
  margin-bottom: 4rem;
  padding: 0 4rem;
}
.project__media__figure {
  height: 100%;
  width: 100%;
}
.project__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.project__text {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 4rem;
  height: fit-content;
}
.project__text__left__title {
  text-transform: uppercase;
}
.project__text__left__sub {
  display: flex;
  justify-content: space-between;
}
.project__text__left__sub__visit {
  position: relative;
}
.project__text__left__sub__visit__border {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 0.1rem;
  background: #f3f3f3;
  transform: scaleX(0);
}
.project__text__right {
  width: 50rem;
  align-self: flex-start;
}
.project__text__right__media {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  background: rgba(243, 243, 243, 0.1176470588);
  border-radius: 5px;
  padding: 1rem;
}
.project__text__right__media__element {
  height: 2.5rem;
  width: 2.5rem;
}
.project__text__right__media__element__figure {
  height: 100%;
  width: 100%;
}
.project__text__right__media__element__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.project__text__right__text {
  margin-top: 2rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.project__desc {
  height: 120dvh;
  width: 100%;
  padding: 10rem 0;
  display: grid;
  place-content: center;
}
.project__desc__desk {
  display: flex;
  gap: 8rem;
  align-items: center;
}
.project__desc__desk__media {
  height: 44rem;
  width: 60rem;
}
.project__desc__desk__media__figure {
  height: 100%;
  width: 100%;
}
.project__desc__desk__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.project__desc__phone {
  display: flex;
  gap: 8rem;
  align-items: center;
}
.project__desc__phone__media {
  height: 44rem;
  width: 60rem;
}
.project__desc__phone__media__figure {
  height: 100%;
  width: 100%;
}
.project__desc__phone__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

.about {
  z-index: 2;
}
.about__wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8rem;
}
.about__media {
  width: 30rem;
  height: 42rem;
}
.about__media__figure {
  height: 100%;
  width: 100%;
}
.about__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/